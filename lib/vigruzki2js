#!/usr/bin/env python3

import sys
import os
import re
import json
from ipaddress import IPv4Network, IPv4Address, IPv6Network, IPv6Address

import xml.parsers.expat

class DumpParserErr(object):
    __slots__ = ('unknown_attrs', 'unknown_tags', 'duplicate_cdata_tag')
    def __init__(self):
        self.unknown_attrs = set()
        self.unknown_tags = set()
        self.duplicate_cdata_tag = False
    def __len__(self):
        return len(self.unknown_attrs) + len(self.unknown_tags) + int(self.duplicate_cdata_tag)
    def __str__(self):
        return 'DumpParserErr(attrs={}, tags={}, dupcdata={})'.format(self.unknown_attrs, self.unknown_tags, self.duplicate_cdata_tag)

class DumpParser(object):
    def __init__(self, content_cb):
        self.err = DumpParserErr()
        self.content_cb = content_cb
        self.p = xml.parsers.expat.ParserCreate()
        self.p.StartElementHandler = self.open_tag
        self.p.EndElementHandler = self.close_tag
        self.buf = None
        self.tag_ts = None
    register_known_keys = frozenset(('updateTime', 'updateTimeUrgently', 'formatVersion', 'xmlns:tns', 'xmlns:reg'))
    content_int_keys = frozenset(('id', 'entryType', 'urgencyType'))
    content_str_keys = frozenset(('includeTime', 'ts', 'blockType'))
    content_known_keys = content_int_keys | content_str_keys | frozenset(('hash',))
    content_cdata_tag = frozenset(('url', 'domain', 'ip', 'ipv6', 'ipSubnet', 'ipv6Subnet'))
    decision_str_keys = frozenset(('date', 'number', 'org'))
    def open_tag(self, tag, attr):
        if tag in self.content_cdata_tag:
            self.start_cdata_writer()
            self.tag_ts = attr.get('ts')
            for _ in (attr.keys() - {'ts'}):
                self.err.unknown_attrs.add((tag, _))
        elif tag == 'decision':
            for key in self.decision_str_keys:
                self.content['decision_'+key] = attr.get(key)
            for _ in (attr.keys() - self.decision_str_keys):
                self.err.unknown_attrs.add((tag, _))
        elif tag == 'content':
            self.content = {
                'id': int(attr['id']),
                'entryType': int(attr['entryType']),
                'urgencyType': None,
                'includeTime': None,
                'ts': None, # content-ts
                'blockType': None,
                'decision_date': None,
                'decision_number': None,
                'decision_org': None,
                'url': {}, # cdata -> tag-ts
                'domain': {},
                'ip': {},
                'ipv6': {},
                'ipSubnet': {},
                'ipv6Subnet': {},
            }
            for cdtag in self.content_cdata_tag:
                self.content[cdtag] = {} # cdata -> ts
            value = attr.get('urgencyType')
            self.content['urgencyType'] = int(value) if value is not None else None
            for key in self.content_str_keys:
                self.content[key] = attr.get(key)
            for _ in (attr.keys() - self.content_known_keys):
                self.err.unknown_attrs.add((tag, _))
        elif tag == 'reg:register':
            for _ in (attr.keys() - self.register_known_keys):
                self.err.unknown_attrs.add((tag, _))
        else:
            self.err.unknown_tags.add(tag)
    url_with_path_re = re.compile('[^/:]+://[^/]+/+[^/#]+')
    def close_tag(self, tag):
        if tag in self.content_cdata_tag:
            cdata = self.pop_cdata()
            dest = self.content[tag]
            if cdata in dest:
                self.err.duplicate_cdata_tag = True
            dest[cdata] = self.tag_ts
            self.tag_ts = None
        elif tag == 'content':
            c, self.content = self.content, None
            c['has_domain'] = len(c['domain']) > 0
            c['has_domain_mask'] = any(('*' in _) for _ in c['domain'].keys())
            c['has_url'] = len(c['url']) > 0
            c['has_http'] = any(_.startswith('http:') for _ in c['url'].keys())
            c['has_https'] = any(_.startswith('https:') for _ in c['url'].keys())
            c['has_path'] = any(self.url_with_path_re.match(_) for _ in c['url'].keys())
            c['has_ip'] = sum(len(c[k]) for k in ('ip', 'ipv6', 'ipSubnet', 'ipv6Subnet')) > 0
            #if c['blockType'] == BLOCKTYPE_NULL:
            #    raise ValueError('NULL placeolder conflict', c['blockType'])
            #if c['blockType'] is None:
            #    c['blockType'] = BLOCKTYPE_NULL # NULL-able column is bad for UNIQUE
            self.content_cb(c)
    def start_cdata_writer(self):
        assert self.buf is None
        self.buf = ''
        self.p.CharacterDataHandler = self.on_char_data
    def pop_cdata(self):
        self.p.CharacterDataHandler = None
        ret = self.buf
        self.buf = None
        return ret
    def on_char_data(self, data):
        self.buf += data
    def parse(self, blob, is_final=False):
        self.p.Parse(blob, is_final)

# 274190 {"blockType":"domain",     "has_domain":true, "has_domain_mask":false,"has_ip":true, "has_url":false,"has_http":false,"has_https":false,"has_path":false}
#     53 {"blockType":"domain",     "has_domain":true, "has_domain_mask":false,"has_ip":false,"has_url":false,"has_http":false,"has_https":false,"has_path":false}
# 157511 {"blockType":"domain-mask","has_domain":true, "has_domain_mask":true, "has_ip":true, "has_url":false,"has_http":false,"has_https":false,"has_path":false}
#      8 {"blockType":"domain-mask","has_domain":true, "has_domain_mask":true, "has_ip":false,"has_url":false,"has_http":false,"has_https":false,"has_path":false}
#    961 {"blockType":"ip",         "has_domain":false,"has_domain_mask":false,"has_ip":true, "has_url":false,"has_http":false,"has_https":false,"has_path":false}
# 145962 {"blockType":null,         "has_domain":true, "has_domain_mask":false,"has_ip":true, "has_url":true, "has_http":false,"has_https":true, "has_path":true}
#  47840 {"blockType":null,         "has_domain":true, "has_domain_mask":false,"has_ip":true, "has_url":true, "has_http":true, "has_https":false,"has_path":true}
#   4808 {"blockType":null,         "has_domain":true, "has_domain_mask":false,"has_ip":true, "has_url":true, "has_http":false,"has_https":true, "has_path":false}
#   3335 {"blockType":null,         "has_domain":true, "has_domain_mask":false,"has_ip":true, "has_url":true, "has_http":true, "has_https":false,"has_path":false}
#    368 {"blockType":null,         "has_domain":true, "has_domain_mask":false,"has_ip":true, "has_url":true, "has_http":true, "has_https":true, "has_path":true}
#      4 {"blockType":null,         "has_domain":true, "has_domain_mask":false,"has_ip":true, "has_url":true, "has_http":false,"has_https":false,"has_path":false}
#      3 {"blockType":null,         "has_domain":true, "has_domain_mask":false,"has_ip":true, "has_url":true, "has_http":true, "has_https":true, "has_path":false}
#      2 {"blockType":null,         "has_domain":true, "has_domain_mask":false,"has_ip":false,"has_url":true, "has_http":false,"has_https":true, "has_path":true}

def dfix(d): # fix ugly typos in domain names
    d = d.lower().rstrip('.')
    if d.endswith(('.\u0441c', '.c\u0441', '.\u0441\u0441')):
        d = d[:-3] + '.cc'
    elif d.endswith(('.\u0441o')):
        d = d[:-3] + '.co'
    return d

def main():
    domains, masks = set(), set()
    ip4, ip6, net4, net6 = set(), set(), set(), set()

    def on_content(c):
        if c['blockType'] == 'domain':
            # <content id="5675493" includeTime="2023-04-01T12:59:29" entryType="5" hash="8A347BE6D7B564404F841BEDE9175964" blockType="domain" ts="2023-04-01T12:59:29">
            #  <domain><![CDATA[37.1.205.159]]></domain>
            #  <ip>37.1.205.159</ip>
            # </content>
            for d in c['domain'].keys():
                d = dfix(d)
                try:
                    maybe_ip = IPv4Address(d)
                except ValueError:
                    maybe_ip = None
                if maybe_ip is None:
                    domains.add(d)
                else:
                    ip4.add(maybe_ip)
        elif c['blockType'] == 'domain-mask':
            masks.update(dfix(d.removeprefix('*.')) for d in c['domain'].keys())
        elif c['blockType'] == 'ip':
            # Normalization is needed as the folowing are the real datapoints:
            # <ipv6>2600:9000:2077:2000:0009:dfa0:31c0:93a1</ipv6>
            # <ipv6Subnet ts="2018-11-08T17:00:00+03:00">2a02:4680:22::214/32</ipv6Subnet>
            ip4.update(IPv4Address(_) for _ in c['ip'].keys())
            ip6.update(IPv6Address(_) for _ in c['ipv6'].keys())
            net4.update(IPv4Network(_, strict=False) for _ in c['ipSubnet'].keys())
            net6.update(IPv6Network(_, strict=False) for _ in c['ipv6Subnet'].keys())
        elif c['blockType'] is None or c['blockType'] == 'default':
            assert c['has_domain'] and len(c['domain']) == 1
            d = list(c['domain'].keys())[0]
            assert all(d in _.lower() for _ in c['url']), c # basic sanity check
            # <content id="1533306" includeTime="2019-05-25T07:03:54" entryType="1" hash="346233425599497DC076B2055733FA60" ts="2019-05-25T07:03:54">
            #  <url><![CDATA[https://99.81.167.212:16869]]></url>
            #  <domain><![CDATA[99.81.167.212]]></domain>
            #  <ip>99.81.167.212</ip>
            # </content>
            d = dfix(d)
            try:
                maybe_ip = IPv4Address(d)
            except ValueError:
                maybe_ip = None
            if maybe_ip is None:
                domains.add(d)
            else:
                ip4.add(maybe_ip)
        else:
            raise ValueError('Unknown blockType', c['blockType'])

    with open(sys.stdin.fileno(), 'rb') as fd:
        parser = DumpParser(on_content)
        for blob in iter(lambda: fd.read(4 * 4096), b''):
            parser.parse(blob)
        parser.parse(b'', is_final=True)
        if parser.err:
            raise RuntimeError(parser.err)

    json.dump({
        'domain': [_.encode('idna').decode('ascii') for _ in sorted(domains)],
        'mask': [_.encode('idna').decode('ascii') for _ in sorted(masks)],
        'ip4': [str(_) for _ in sorted(ip4)],
        'ip6': [str(_) for _ in sorted(ip6)],
        'net4': [str(_) for _ in sorted(net4)],
        'net6': [str(_) for _ in sorted(net6)],
    }, fp=sys.stdout)

if __name__ == '__main__':
    main()
